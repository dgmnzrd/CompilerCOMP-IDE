package comp.flex;

// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/LexerColor.flex

import compilerTools.TextColor;
import java.awt.Color;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexerColor {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\0\1\5\5\0\2\6\1\7\1\10\1\0\1\11"+
    "\1\12\1\13\1\14\11\15\7\0\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\27\1\43\1\44\1\45\1\27\1\6"+
    "\1\0\1\6\1\0\1\27\1\0\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\27\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\27\1\72\1\73\1\74\1\27\1\6"+
    "\1\0\1\6\7\0\1\3\73\0\1\75\7\0\1\75"+
    "\3\0\1\75\3\0\1\75\1\0\1\75\6\0\1\75"+
    "\1\0\1\75\4\0\1\75\7\0\1\75\3\0\1\75"+
    "\3\0\1\75\1\0\1\75\6\0\1\75\1\0\1\75"+
    "\u012b\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\3\1\2\4\35\3"+
    "\1\5\2\0\1\6\26\3\1\7\1\3\1\10\1\3"+
    "\1\10\4\3\1\10\22\3\2\0\2\6\10\3\1\11"+
    "\12\3\1\12\16\3\1\0\1\6\34\3\1\13";

  private static int [] zzUnpackAction() {
    int [] result = new int[163];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\76\0\174\0\272\0\76\0\370\0\u0136"+
    "\0\u0174\0\76\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8"+
    "\0\u0326\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8"+
    "\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8"+
    "\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8"+
    "\0\76\0\272\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c"+
    "\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c"+
    "\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c"+
    "\0\u0e4a\0\u0e88\0\u0364\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe"+
    "\0\u0ffc\0\u103a\0\u1078\0\u0364\0\u10b6\0\u10f4\0\u1132\0\u1170"+
    "\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360"+
    "\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550"+
    "\0\76\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702"+
    "\0\u1740\0\u177e\0\u0364\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4"+
    "\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u0364\0\u1a28\0\u1a66"+
    "\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56"+
    "\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1512\0\u1dca\0\u1e08"+
    "\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8"+
    "\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8"+
    "\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a\0\u23d8"+
    "\0\u2416\0\u2454\0\u0364";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[163];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\2\1\7"+
    "\1\10\1\2\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\2\22\1\23\4\22\1\24\1\25"+
    "\1\26\1\22\1\27\1\30\1\31\1\22\1\32\2\22"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\2\22\1\41"+
    "\3\22\1\42\1\43\1\44\1\22\1\45\1\46\1\47"+
    "\1\22\1\50\3\22\100\0\1\3\100\0\1\51\3\0"+
    "\2\52\1\0\61\52\11\0\1\6\76\0\1\6\73\0"+
    "\1\53\3\0\1\54\76\0\2\13\74\0\17\22\1\55"+
    "\26\22\1\56\13\22\14\0\6\22\1\57\11\22\1\60"+
    "\2\22\1\61\12\22\1\62\10\22\1\63\2\22\1\64"+
    "\7\22\14\0\15\22\1\65\26\22\1\66\15\22\14\0"+
    "\6\22\1\67\27\22\1\70\23\22\14\0\15\22\1\71"+
    "\1\22\1\55\10\22\1\72\13\22\1\73\1\22\1\56"+
    "\10\22\1\74\2\22\14\0\2\22\1\75\12\22\1\76"+
    "\2\22\1\77\11\22\1\100\11\22\1\101\2\22\1\102"+
    "\12\22\14\0\62\22\14\0\7\22\1\103\6\22\1\104"+
    "\1\105\17\22\1\103\5\22\1\106\1\107\13\22\14\0"+
    "\6\22\1\110\11\22\1\111\15\22\1\112\10\22\1\113"+
    "\12\22\14\0\23\22\1\114\26\22\1\114\7\22\14\0"+
    "\20\22\1\115\2\22\1\116\23\22\1\117\2\22\1\120"+
    "\7\22\14\0\2\22\1\121\3\22\1\122\23\22\1\123"+
    "\3\22\1\124\23\22\14\0\6\22\1\125\13\22\1\126"+
    "\2\22\1\127\10\22\1\130\12\22\1\131\2\22\1\132"+
    "\5\22\14\0\23\22\1\133\26\22\1\134\7\22\14\0"+
    "\11\22\1\135\27\22\1\136\20\22\14\0\46\22\1\56"+
    "\13\22\14\0\36\22\1\62\10\22\1\63\2\22\1\64"+
    "\7\22\14\0\44\22\1\66\15\22\14\0\36\22\1\70"+
    "\23\22\14\0\44\22\1\73\1\22\1\56\10\22\1\74"+
    "\2\22\14\0\32\22\1\100\11\22\1\101\2\22\1\102"+
    "\12\22\14\0\37\22\1\103\5\22\1\106\1\107\13\22"+
    "\14\0\36\22\1\112\10\22\1\113\12\22\14\0\52\22"+
    "\1\114\7\22\14\0\47\22\1\117\2\22\1\120\7\22"+
    "\14\0\32\22\1\123\3\22\1\124\23\22\14\0\36\22"+
    "\1\130\12\22\1\131\2\22\1\132\5\22\14\0\52\22"+
    "\1\134\7\22\14\0\41\22\1\136\20\22\7\137\1\140"+
    "\66\137\2\54\1\141\1\54\1\142\71\54\14\0\5\22"+
    "\1\114\54\22\14\0\35\22\1\114\24\22\14\0\10\22"+
    "\1\143\51\22\14\0\20\22\1\144\41\22\14\0\6\22"+
    "\1\145\53\22\14\0\40\22\1\146\21\22\14\0\47\22"+
    "\1\147\12\22\14\0\36\22\1\150\23\22\14\0\2\22"+
    "\1\151\57\22\14\0\32\22\1\152\27\22\14\0\7\22"+
    "\1\153\52\22\14\0\37\22\1\153\22\22\14\0\24\22"+
    "\1\154\35\22\14\0\4\22\1\155\55\22\14\0\53\22"+
    "\1\156\6\22\14\0\34\22\1\157\25\22\14\0\15\22"+
    "\1\71\44\22\14\0\20\22\1\160\41\22\14\0\23\22"+
    "\1\103\36\22\14\0\44\22\1\73\15\22\14\0\47\22"+
    "\1\161\12\22\14\0\52\22\1\103\7\22\14\0\21\22"+
    "\1\162\40\22\14\0\21\22\1\163\3\22\1\103\34\22"+
    "\14\0\50\22\1\164\11\22\14\0\50\22\1\165\3\22"+
    "\1\103\5\22\14\0\30\22\1\111\31\22\14\0\25\22"+
    "\1\114\34\22\14\0\57\22\1\113\2\22\14\0\54\22"+
    "\1\114\5\22\14\0\27\22\1\166\32\22\14\0\12\22"+
    "\1\167\47\22\14\0\56\22\1\166\3\22\14\0\42\22"+
    "\1\170\17\22\14\0\17\22\1\171\42\22\14\0\25\22"+
    "\1\172\34\22\14\0\46\22\1\173\13\22\14\0\54\22"+
    "\1\174\5\22\14\0\15\22\1\175\44\22\14\0\23\22"+
    "\1\176\36\22\14\0\23\22\1\177\36\22\14\0\44\22"+
    "\1\200\15\22\14\0\52\22\1\201\7\22\14\0\52\22"+
    "\1\202\7\22\14\0\26\22\1\154\2\22\1\103\30\22"+
    "\14\0\55\22\1\156\2\22\1\103\1\22\14\0\12\22"+
    "\1\203\47\22\14\0\42\22\1\204\17\22\7\137\1\205"+
    "\75\137\1\205\3\137\1\206\62\137\2\0\1\141\107\0"+
    "\12\22\1\207\47\22\14\0\15\22\1\210\44\22\14\0"+
    "\2\22\1\211\57\22\14\0\42\22\1\212\17\22\14\0"+
    "\44\22\1\213\15\22\14\0\32\22\1\214\27\22\14\0"+
    "\24\22\1\215\35\22\14\0\53\22\1\216\6\22\14\0"+
    "\6\22\1\103\53\22\14\0\6\22\1\217\53\22\14\0"+
    "\36\22\1\103\23\22\14\0\36\22\1\220\23\22\14\0"+
    "\2\22\1\221\57\22\14\0\32\22\1\222\27\22\14\0"+
    "\20\22\1\223\41\22\14\0\26\22\1\111\33\22\14\0"+
    "\47\22\1\224\12\22\14\0\55\22\1\113\4\22\14\0"+
    "\17\22\1\111\42\22\14\0\46\22\1\113\13\22\14\0"+
    "\10\22\1\225\51\22\14\0\26\22\1\226\33\22\14\0"+
    "\40\22\1\227\21\22\14\0\55\22\1\230\4\22\14\0"+
    "\7\22\1\114\52\22\14\0\25\22\1\166\34\22\14\0"+
    "\12\22\1\231\47\22\14\0\37\22\1\114\22\22\14\0"+
    "\54\22\1\166\5\22\14\0\42\22\1\232\17\22\14\0"+
    "\15\22\1\154\44\22\14\0\44\22\1\156\15\22\7\137"+
    "\1\205\3\137\1\141\62\137\14\0\17\22\1\114\42\22"+
    "\14\0\6\22\1\233\53\22\14\0\14\22\1\103\45\22"+
    "\14\0\46\22\1\114\13\22\14\0\36\22\1\234\23\22"+
    "\14\0\43\22\1\103\16\22\14\0\24\22\1\103\35\22"+
    "\14\0\53\22\1\103\6\22\14\0\21\22\1\111\40\22"+
    "\14\0\50\22\1\113\11\22\14\0\25\22\1\103\34\22"+
    "\14\0\54\22\1\103\5\22\14\0\23\22\1\235\36\22"+
    "\14\0\52\22\1\236\7\22\14\0\6\22\1\114\53\22"+
    "\14\0\23\22\1\237\36\22\14\0\36\22\1\114\23\22"+
    "\14\0\52\22\1\240\7\22\14\0\17\22\1\241\42\22"+
    "\14\0\46\22\1\242\13\22\14\0\2\22\1\237\57\22"+
    "\14\0\32\22\1\240\27\22\14\0\25\22\1\243\34\22"+
    "\14\0\54\22\1\243\5\22\14\0\17\22\1\103\42\22"+
    "\14\0\46\22\1\103\13\22\14\0\10\22\1\114\51\22"+
    "\14\0\40\22\1\114\21\22";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9362];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\3\1\1\11\36\1\1\11"+
    "\2\0\63\1\2\0\1\11\43\1\1\0\36\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[163];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;
    /** Number of newlines encountered up to the start of the matched text. */
    /** Number of characters from the last newline up to the start of the matched text. */

  /** Number of characters up to the start of the matched text. */
  private long yychar;
    /** Whether the scanner is currently at the beginning of a line. */
    /** Whether the user-EOF-code has already been executed. */

  /* user code: */
    private TextColor textColor(long start, int size, Color color){
        return new TextColor((int) start, size, color);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerColor(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private void yyResetPosition() {
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public TextColor yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* Ignorar */
            }
            // fall through
          case 12: break;
          case 2:
            { /*IGNORAR*/
            }
            // fall through
          case 13: break;
          case 3:
            { return textColor(yychar, yylength(), new Color(171, 178, 191));
            }
            // fall through
          case 14: break;
          case 4:
            { return textColor(yychar, yylength(), new Color(219, 157, 99));
            }
            // fall through
          case 15: break;
          case 5:
            { return textColor(yychar, yylength(), new Color(154, 204, 118));
            }
            // fall through
          case 16: break;
          case 6:
            { return textColor(yychar, yylength(), new Color(146, 146, 146));
            }
            // fall through
          case 17: break;
          case 7:
            { return textColor(yychar, yylength(), new Color(205, 116, 232));
            }
            // fall through
          case 18: break;
          case 8:
            { return textColor(yychar, yylength(), new Color(240, 198, 120));
            }
            // fall through
          case 19: break;
          case 9:
            { return textColor( yychar, yylength(), new Color(240, 198, 120));
            }
            // fall through
          case 20: break;
          case 10:
            { return textColor(yychar, yylength(), new Color(92, 179, 250));
            }
            // fall through
          case 21: break;
          case 11:
            { return textColor( yychar, yylength(), new Color(205, 116, 232));
            }
            // fall through
          case 22: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
